//! # Event Module
//!
//! This module defines the [`Event`] and [`EventType`] used throughout the
//! **PulseHome** system.  
//!
//! Events act as messages between devices, the [`HomeHub`](crate::mediator::HomeHub),
//! and observers (like the display or logger).
//!
//! ## Design Role
//! - Forms the **core communication unit** for the Mediator pattern.
//! - Carries device action details (e.g., turning on a light, setting a temperature).
//!
//! ## Example
//! ```
//! use pulsehome::models::event::{Event, EventType};
//! let event = Event::new(
//!     "Living Room Light",
//!     "Light",
//!     EventType::TurnOn,
//!     None,
//! );
//!
//! assert_eq!(event.device_type, "Light");
//! assert_eq!(event.event_type, EventType::TurnOn);
//! ```

use chrono::Local;

/// Represents the type of action triggered within the smart home system.
///
/// Each variant corresponds to a possible command or change of state
/// for a device in the home.
#[derive(Debug, PartialEq, Clone)]
pub enum EventType {
    TurnOn,
    TurnOff,
    Lock,
    Unlock,
    SetTemp,
}

/// Represents a single event generated by user input or device activity.
///
/// The `Event` struct carries contextual information like the name of
/// the device, its type, the event type, and an optional payload (such as
/// a temperature value or configuration string).
#[derive(Debug, Clone)]
pub struct Event {
    pub device_name: String,
    pub device_type: String,
    pub event_type: EventType,
    pub payload: Option<String>,
    pub timestamp: String,
}

impl Event {
    /// Creates a new [`Event`].
    ///
    /// # Arguments
    /// - `device_name` — The name of the device.
    /// - `device_type` — The category/type of the device.
    /// - `event_type` — The action represented by this event.
    /// - `payload` — Optional data value (e.g., `"22"` for temperature).
    ///
    /// # Returns
    /// A fully constructed [`Event`] instance with a timestamp.
    ///
    /// # Example
    /// ```
    /// use pulsehome::models::event::{Event, EventType};
    ///
    /// let event = Event::new(
    ///     "Bedroom Thermostat",
    ///     "Thermostat",
    ///     EventType::SetTemp,
    ///     Some("24".into())
    /// );
    ///
    /// assert_eq!(event.device_type, "Thermostat");
    /// assert_eq!(event.payload, Some("24".to_string()));
    /// ```
    pub fn new(
        device_name: impl Into<String>,
        device_type: impl Into<String>,
        event_type: EventType,
        payload: Option<String>,
    ) -> Self {
        Event {
            device_name: device_name.into(),
            device_type: device_type.into(),
            event_type,
            payload,
            timestamp: Local::now().format("%Y-%m-%d %H:%M:%S").to_string(),
        }
    }
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn create_event_turn_on_light() {
        let event = Event::new("Living room light", "light", EventType::TurnOn, None);
        assert_eq!(event.device_name, "Living room light");
        assert_eq!(event.payload, None);
    }

    #[test]
    fn create_event_set_temp() {
        let event = Event::new(
            "Bedroom thermostat",
            "ThermoStat",
            EventType::SetTemp,
            Some("24".to_string()),
        );
        assert_eq!(event.device_name, "Bedroom thermostat");
        assert_eq!(event.payload.as_deref(), Some("24"));
    }
}
